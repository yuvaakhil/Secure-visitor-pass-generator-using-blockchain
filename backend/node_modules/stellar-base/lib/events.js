"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.humanizeEvents = humanizeEvents;
var _xdr = _interopRequireDefault(require("./xdr"));
var _strkey = require("./strkey");
var _scval = require("./scval");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/**
 * Converts raw diagnostic or contract events into something with a flatter,
 * human-readable, and understandable structure.
 *
 * @param {xdr.DiagnosticEvent[] | xdr.ContractEvent[]} events  either contract
 *    events or diagnostic events to parse into a friendly format
 *
 * @returns {SorobanEvent[]}  a list of human-readable event structures, where
 *    each element has the following properties:
 *  - type: a string of one of 'system', 'contract', 'diagnostic
 *  - contractId?: optionally, a `C...` encoded strkey
 *  - topics: a list of {@link scValToNative} invocations on the topics
 *  - data: similarly, a {@link scValToNative} invocation on the raw event data
 */
function humanizeEvents(events) {
  return events.map(function (e) {
    if (e instanceof _xdr["default"].DiagnosticEvent) {
      return extractEvent(e.event());
    }
    return extractEvent(e);
  });
}
function extractEvent(event) {
  return {
    contractId: event.contractId() === null ? '' : _strkey.StrKey.encodeContract(event.contractId()),
    type: event.type().name,
    topics: event.body().value().topics().map(function (t) {
      return (0, _scval.scValToNative)(t);
    }),
    data: (0, _scval.scValToNative)(event.body().value().data())
  };
}